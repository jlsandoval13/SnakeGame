#include "Windows.h"
#include <SFML/Graphics.hpp>
#include <time.h>
using namespace sf;

//globals
int num_vertBox = 30, num_horzBox = 20;
int size = 16; //Number of pixels
int w = size * num_horzBox; //Background number of pixels in width
int h = size * num_vertBox; //........................... in height

int direction, snake_length = 4;

//Maximum size of snake
struct Snake
{
	int x, y;
}s[100];

struct Fruit
{
	int x, y;
}Food;

void Tick()
{
	//While snake is moving, Move remaining pieces of snake s[1] - s[99]
	for (int i = snake_length; i > 0; --i)
	{
		s[i].x = s[i - 1].x;
		s[i].y = s[i - 1].y;
	}

	//Head of Snake on direction of user s[0]
	//User Up
	if (direction == 3)
		s[0].y -= 1;
	//User  Down
	if (direction == 0)
		s[0].y += 1;
	//User Left
	if (direction == 1)
		s[0].x -= 1;
	//User Right
	if (direction == 2)
		s[0].x += 1;

	//If snake eats food it grows
	if (((s[0].x) == Food.x) && ((s[0].y) == Food.y))
	{
		//Increment the snake
		snake_length++;
		delay += .05;

		//Randomly place food somewhere else
		Food.x = rand() % num_horzBox;
		Food.y = rand() % num_vertBox;
	}
}

//Boundary Checking screen loop back on other side
if (s[0].x > num_horzBox)
s[0].x = 0;
if (s[0].x < 0)
	s[0].x = numhorzBox;
//Top and Bottom
if (s[0].y > num_vertBox)
s[0].y = 0;
if (s[0].y < 0)
	s[0].y = num_vertBox;

//Check if snake goes over itself
for (int i = 1; i < snake_length; i++)
{
	//Cut Snake in half from the place eaten
	if (s[0].x == s[i].x && s[0].y == s[i].y)
		snake_length = i;
}

int main()
{
	srand(time(0));

	RenderWindow window(VideoMode(w, h), "Snake Game!");

	//Textures
	//Load an image
	Texture t1, t2, t3, t4;
	t1.loadFromFile("image/white.png");
	t2.loadFromFile("image/red.png");
	t3.loadFromFile("image/green.png");
	t4.loadFromFile("image/coin.png");

	//Sprite
	//Has physical dimensions
	Sprite sprite1(t1);
	Sprite sprite2(t2);
	Sprite sprite3(t3);
	Sprite sprite4(t4);

	Food.x = 10;
	Food.y = 10;

	Clock clock;
	float timer = 0, delay = .1;

	while (window.isOpen())
	{
		float time = clock.getElapsedTime().asSeconds();
		clock.restart();
		timer += time;

		//Events allow us to check when a user does something
		Event e;

		//Check when window is closed
		while (window.pollEvent(e))
		{
			if (e.type == Event::Closed)
				window.close();
		}
	}

	//Controls for snake movement by user
	if (Keyboard::isKeyPressed(Keyboard::Up)) direction = 3;
	if (Keyboard::isKeyPressed(Keyboard::Down)) direction = 0;
	if (Keyboard::isKeyPressed(Keyboard::Left)) direction = 2;
	if (Keyboard::isKeyPressed(Keyboard::Right)) direction = 1;

	if (Keyboard::isKeyPessed(Keyboard::w)) direction = 3;
	if (Keyboard::isKeyPessed(Keyboard::a)) direction = 0;
	if (Keyboard::isKeyPessed(Keyboard::s)) direction = 2;
	if (Keyboard::isKeyPessed(Keyboard::d)) direction = 1;

	if (timer > delay)
	{
		timer = 0; //Reset timer
		Tick(); //Move snake one sprite forward
	}

	//Draw
	window.clear();

	//Draw Background
	for (int i = 0; i < num_horzBox; i++)
		for (int j = 0; j < num_vertBox; j++)
		{
			sprite1.setPosition(i * size, j * size);
			window.draw(sprite1);
		}

	//Draw snake
	for (int i = 0; i < snake_length; i++)
	{
		sprite2.setPosition(s[i].x*size, s[i].y*size);
		window.draw(sprite2);
	}
	for (int j = 0; j < snake_length; j++)
	{
		sprite3.setPosition(s[j].x*size, s[j].y*size);
		window.draw(sprite3);
	}

	//Draw fruit
	sprite4.setPosition(Food.x*size, Food.y*size);
	window.draw(sprite4);

	window.display();

	return 0;
}
